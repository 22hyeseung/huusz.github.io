{"meta":{"title":"Huusz's Log","subtitle":null,"description":null,"author":"huusz","url":"http://huusz.github.io"},"pages":[],"posts":[{"title":"[SASS] SassScript","slug":"SCSS/SASS-SassScript","date":"2017-08-06T07:56:57.000Z","updated":"2017-08-07T02:40:17.000Z","comments":true,"path":"2017/08/06/SCSS/SASS-SassScript/","link":"","permalink":"http://huusz.github.io/2017/08/06/SCSS/SASS-SassScript/","excerpt":"","text":"Sass Script1. Data Type프로퍼티값으로 사용할 수 있는 값에는 각각의 자료형(Data Type)이 존재한다. SassScript가 제공하는 자료형은 7가지가 있다. 숫자형e.g) 1.2, 13, 10px 문자열CSS는 2종류의 문자열을 사용할 수 있다. 따옴표를 사용하는 경우(“Lucida Grande”, ‘http://sass-lang.com’)와 사용하지 않는 경우(bold, sans-serif)가 있다. Sass는 2종류의 문자열 모두를 인식할 수 있으며 컴파일 후의 CSS에는 Sass에서 사용한 문자열이 그대로 출력된다.e.g. “Lucida Grande”, ‘http://sass-lang.com’, sans-serif 컬러e.g. blue, #04a3f9, rgba(255, 0, 0, 0.5) booleane.g. true, false null listmargin과 padding 프로퍼티값 지정에 사용되는 0 auto와 font-family 프로퍼티값 지정에 사용되는 Helvetica, Arial, sans-serif 등은 공백 또는 콤마 구분된 값의 list이다.e.g. 1.5em 1em 0 2em, Helvetica, Arial, sans-serif mapJSON과 유사한 방식으로 map-get 함수를 사용하여 원하는 값은 추출할 수 있다.e.g. (key1: value1, key2: value2) 12345678910111213// map$foundation-palette: ( primary: #E44347, mars: #D7525C, saturn: #E4B884, neptune: #5147D7);.mars &#123; color: map-get($foundation-palette, mars); &#125;// =&gt; .mars &#123; color: #D7525C; &#125; 2. 변수Sass에서는 변수를 사용할 수 있다. 문자열, 숫자, 컬러(#aa443f) 등을 사전에 변수에 저장하고 필요할 때 불러 사용할 수 있다. 변수명은 $로 시작한다. 12345678910111213141516$width: 960px;header &#123; width: $width; margin: 0 auto;&#125;#main &#123; width: $width; margin: 20px auto;&#125;footer &#123; width: $width; margin: 0 auto;&#125; 어떤 것을 변수명으로 설정할지에 대한 설계가 필요하다. 변수명은 대체로 파일의 앞 쪽에 몰아서 선언해둔다. 3. 변수의 스코프123456789101112131415161718192021222324252627$width: 960px; // global variableheader &#123; width: $width; margin: 0 auto;&#125;#main &#123; $color: #333; // local variable width: $width; margin: 20px auto; section &#123; p &#123; color: $color; a:link &#123; color: $color; &#125; &#125; &#125;&#125;footer &#123; width: $width; margin: 0 auto; color: $color;&#125; 위 코드를 컴파일하면 Undefined variable: “$color”라는 에러가 발생한다. 이는 #main에서 선언한 $color는 #main 내에서만 유효한 지역변수이기 때문이다. 코드블럭 내에서 선언한 지역변수를 전역변수화하는 방법은 아래와 같다. 1234#main &#123; $color: #333 !global; // global variable width: $width; ... 4. 연산자(Operation)1) 숫자 연산자 Operator Description + 덧셈 - 뺄셈 * 곱셈 / 나눗셈 % 나머지 == 동등 != 부등 123456789$width: 100px;#foo &#123; width: $width + 10; //110px&#125;#bar &#123; width: $width + 10in; //1060px&#125; 변수 $width의 값 100px에 10 또는 10em과 같이 다른 단위의 값을 연산하여도 에러없이 연산이 수행된다. 이때 연산자의 왼쪽 값을 기준으로 단위가 설정된다. $width에 10em을 더하면 어떻게 될까? 12345$width: 100px;#foo &#123; width: $width + 10em; //NG: 100px + 10em&#125; 컴파일 결과 Incompatible units: ‘em’ and ‘px’.이라는 에러를 출력한다. Scss 연산은 대상을 변환하여 연산할 수 없는 경우, 에러를 출력한다. %,em,rem,vh,vw,vmin,vmax와 같이 상대적인 값을 Sass는 알지 못한다. 상대적인 값의 결과값은 브라우저만이 알 수 있기 때문이다. (sass는 단지 css로 변환하기만 할 뿐, em 등등의 값은 알 수 없다.) 따라서 상대적 값을 갖는 단위의 연산은 동일한 단위를 갖는 값과의 연산만이 유효하다. %는 부모를 기준으로, rem은 html을 기준으로 (기본적으로 16px), vw는 뷰포트를 기준으로, 1vw = viewport를 기준으로 1/100. CSS3의 calc함수(IE9 이상에서만 사용할 수 있다.)는 이런 문제를 해결할 수 있다. (calc는 브라우저에서 수행하기 때문에 상대값과 절댓값 사이 계산이 가능한 것이다.) 123#foo &#123; width: calc(25% - 5px);&#125; CSS에서의 /는 나눗셈이 아니라 값을 분리하는 의미를 갖는다. 따라서 Sass의 / 연산자를 사용하기 위해서는 몇가지 조건이 필요하다. 이외의 조건에서는 나눗셈을 하지 않는다. 변수에 대해 사용 괄호 내에서 사용 다른 연산의 일부로서 사용 1234567891011p &#123; // font와 border-radius의 '/'는 CSS문법에 맞는 표현이므로 연산되지 않는다. font: italic bold 12px/30px Georgia, serif; // 타원형 둥근 모서리 border-radius: 10px 20px / 20px; $width: 1000px; width: $width / 2; // 변수에 대해 사용 → width: 500px; height: (500px / 2); // 괄호 내에서 사용 → height: 250px; margin-left: 5px + 8px / 2px; // 다른 연산의 일부로서 사용 → margin-left: 9px;&#125; 변수를 CSS의 /와 함께 사용하고자 하는 경우 #{}(Interpolation)를 사용한다.#{}를 사용하면 변수를 문자열로 인식하게 한다. 따라서 연산을 하지 않는다. 12345p&#123; $font-size: 12px; $line-height: 30px; font: #&#123;$font-size&#125; / #&#123;$line-height&#125;; // 12px/30px&#125; #{}를 좌항에만 사용해주어도 같은 효과가 난다. (좌항을 기준으로 하며, 둘 다 변수일 때만 연산을 하기 때문이다.)하지만 양 쪽 모두 #{}를 사용해주는 것이 더 좋다. 2) 컬러 연산자컬러 값에도 모든 산술 연산자를 적용할 수 있다. 컬러 값은 R은 R끼리, G는 G끼리, B는 B끼리 연산한다.(#RRBBGG 표기법의 숫자는 16진수로 표기한다. 16진수에서는 10부터 A로 시작하는 알파벳이다. 05 + 05 = A) 123456789101112131415161718192021222324p &#123; color: #010203 + #040506; // R: 01 + 04 = 05 // G: 02 + 05 = 07 // B: 03 + 06 = 09 // =&gt; #050709&#125;p &#123; color: #010203 * 2; // R: 01 * 2 = 02 // G: 02 * 2 = 04 // B: x03 * 2 = 06 // =&gt; #020406&#125;p &#123; color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75); /* alpha 값은 연산되지 않는다 / color: rgba(255, 255, 0, 0.75); / alpha 값이 서로 다르면, e.g. rgba(0, 0, 0, 0.7) + rgba(100, 120, 255, 0.5); 이 경우 error가 발생한다. */&#125; alpha값은 연산되지 않는다. 서로 다른 alpha값을 연산하려 하는 경우 error가 발생한다. 서로 같은 alpha값을 연산하려 하는 경우, error는 발생하지 않지만 연산을 하지 않고 값을 그대로 반환한다. 위 예제에서도 연산 결과로 0.75를 그대로 반환하였다. alpha 값을 연산하려면 opacify 함수 또는 transparentize 함수를 사용해야 한다. opacify(불투명화) 함수: + 연산, 첫번째 argument의 alpha값에 두번째 argument를 더해 불투명도를 증가시킨다. transparentize(투명화) 함수: - 연산, 첫번째 argument의 alpha값에 두번째 argument의 alpha값을 빼서 불투명도를 감소시킨다. 1234567$translucent-red: rgba(255, 0, 0, 0.5);p &#123; color: opacify($translucent-red, 0.3); // =&gt; color: rgba(255, 0, 0, 0.8) background-color: transparentize($translucent-red, 0.25); // =&gt; color: rgba(255, 0, 0, 0.25);&#125; 3) 문자열 연산자+ 연산자는 자바스크립트와 같이 문자열을 연결할 수 있다. 123p &#123; cursor: e + -resize; // e-resize&#125; 따옴표가 있는 문자열과 없는 문자열을 함께 사용하는 경우, 좌향의 문자열을 기준으로 따옴표를 처리한다. 하이픈(-) 기호가 사용될 경우, 하이픈 기호를 포함해서 붙인다. 12345678910111213141516p:before &#123; content: \"Foo \" + Bar; //Foo Bar font-family: sans- + \"serif\"; //sans-serif;&#125;.btn &#123; cursor: p + inter; font-family: sans- + 'serif'; &amp;:after &#123; content: \"Hello \" + world; &#125; $value: 100; &amp;:before &#123; content: \"I'm #&#123;$value&#125; years old!\"; &#125;&#125; 12345678910111213/* compiled */p:before&#123; content: \"Foo Bar\"; font-family: sans-serif;&#125;.btn &#123; cursor: pinter; font-family: sans-serif;&#125;.btn:after &#123; content: \"Hello world\"; &#125;.btn:before &#123; content: \"I'm 100 years old!\"; &#125; 4) boolean 연산자 &amp;&amp; (and) || (or) ! (not) 5) list 연산자리스트를 위한 별도의 연산자는 제공되지 않지만, 리스트 함수를 사용하여 필요한 처리를 수행할 수 있다. 5. 함수(Function)Built-in Function 6. Interpolation: #{}인터폴레이션은 변수의 값을 문자열 그대로 삽입한다. 인터폴레이션에 의해 삽입된 문자열은 연산 대상으로 취급되지 않는다. 변수는 프로퍼티값으로만 사용할 수 있으나 #{}을 사용하면 셀렉터와 프로퍼티명에도 사용할 수 있다. 123456789101112131415$name: foo;$attr: border;p.#&#123;$name&#125; &#123; //p.foo #&#123;$attr&#125;-color: blue; //border-color: blue;&#125;.someclass &#123; $font-size: 12px; $line-height: 30px; //연산의 대상으로 취급되지 않게 한다. font: #&#123;$font-size&#125; / #&#123;$line-height&#125;; // 12px / 30px&#125; 7. Ampersand(&amp;)&amp;는 부모요소를 참조하는 셀렉터이다.&amp;는 Sass와 Less에서 아주 유용한 기능으로 주로 중첩(nesting)시에 사용된다. 사용법만 알면, css로 동일한 코드를 작성할 때보다 훨씬 많은 시간을 절약할 수 있다. Nesting1234//scss.parent &#123; .child &#123;&#125;&#125; 12/* compiles to css */.parent .child &#123;&#125; 원하는 만큼 깊게 중첩시킬 수 있지만 지나치게 특수한 셀렉터(덜 유용하고 재정의하기 어려운)가 되는 것을 막기 위해 1 ~ 2단계의 중첩만 유지하는 게 좋다. Adding another class&amp;는 이러한 중첩(네스팅, nesting)에 편리하다. 다음과 같이 둘 이상의 클래스를 사용해서 특수한(구체적인) 선택자(selector)를 만들고자 할 때 특히 그렇다. 12/* css */.some-class.anoter-class &#123;&#125; 위와 같은 css코드는 sass로는 아래처럼 작성할 수 있다. 1234//scss.some-class &#123; &amp;.anoter-class&#123;&#125;&#125; &amp;는 네스팅시 항상 상위 선택자를 탐조한다. &amp;를 제거하고 부모 선택자로 대체한 것으로 생각할 수 있다. 위에서 예시로 들었던 코드를 다시 살펴보면, 1234//scss.parent &#123; .child &#123;&#125;&#125; 이 코드는 사실 &amp;로 네스팅하는 것의 short-hand이다. 123456//scss.parent &#123; &amp; .child&#123; &#125;&#125; 따라서 이 두 예시는 모두 아래처럼 동일하게 컴파일된다. 12/* compiles to css */.parent .child &#123;&#125; &amp;는 자식 선택자에 필요할 때마다 부모 선택자를 배치할 수 있게 하는 매커니즘 정도로 생각할 수 있다. 그러면 &amp;를 어떻게 더 다양하게 활용할 수 있을지 예제를 통해 알아보자. Using the &amp; with pseudo classes&amp;를 이용하면 가상클래스(pseudo class)를 작성할 때 코드의 반복을 현저하게 줄일 수 있다. 12345.button &#123; &amp;:visited &#123;&#125; &amp;:hover &#123;&#125; &amp;:active&#123;&#125;&#125; 1234/*compiles to css*/.button:visited &#123;&#125;.buttom:hover &#123;&#125;.button:active &#123;&#125; 이 경우 &amp;를 사용함으로써 .button을 반복적으로 작성하지 않고도 가상클래스 바로 옆에 .button를 배치할 수 있다. 만약 이때 &amp;를 생략하면, 기본 중첩(nesting)은 다음과 같이 둘 사이에 공백을 넣는다. 123456//scss.button &#123; :visited &#123;&#125; :hover &#123;&#125; :active &#123;&#125;&#125; 12/*css*/.button :hover 주의하자. 공백이 있는 것과 없는 것은 절대 같지 않다. Using the &amp; with &gt;, +, and ~&amp;를 부모-자식 관계를 나타내는 combinator인 &gt;, 인접 형제 관계임을 나타내는 combinator인 +, 그리고 일반적인 형제 관계임을 나타내는 combinator인 ~와 함께 사용하면 아주 용이하다. 코드를 작성할 때, &amp;를 함께 작성해야한다 생각하겠지만, 사실 그렇지 않다. 12345.button &#123; &amp; &gt; span &#123;&#125; &amp; + span &#123;&#125; &amp; ~ span &#123;&#125;&#125; 선택자에서 &amp;를 떼어내서 아래처럼 작성할 수도 있는데, 두 코드는 동일하게 컴파일 된다. 123456// 이렇게 작성해도 똑같다..button &#123; &gt; span &#123;&#125; + span &#123;&#125; ~ span &#123;&#125; &#125; 1234/*compiles to css*/.button &gt; span &#123;&#125;.button + span &#123;&#125;.button ~ span&#123;&#125; Qualifying based on context네스팅된 셀렉터에 &amp;가 반드시 앞에 붙을 필요는 없다. 끝에 &amp;를 붙이면 선택자를 한정할 수 있다. 1234//scss.button &#123; body.page-about &amp; &#123;&#125;&#125; &amp; 자리는 본래 부모 선택자의 자리이다. 만약 필요한 부모 선택자가 있다면 그 자리에 부모 선택자를 기재한다. &amp;는 마지막에 붙인다. 이 방식은 다른 부모를 기반으로 셀렉터를 한정하는데 아주 유용하다. 이 코드는 아래와 같이 컴파일 된다. 1body.page-about .button&#123;&#125; 해석해보자면, page-about이 body클래스의 자식클래스로 있을 때에만 (다르게 말하면, 다른 클래스의 자식클래스로 있을 때는 적용하지 않는다.) button 클래스에 {내용}의 css를 정의한다 그 외 더 많은 예시 8. !default!default flag는 할당되지 않은 변수의 초기값을 설정한다. 123456$content: null; //값이 할당되지 않았다.$content: \"Non-null content\" !default;#main &#123; content: $content; //\"Non-null content\"&#125; 이미 값이 할당되어 있는 변수에 !default flag를 사용하면 적용되지 않는다. 12345678$content: \"First content\";$content: \"Second content?\" !default;$new_content: \"First time reference\" !default;#main &#123; content: $content; //\"First content\" new_content: $new_content; //\"First time reference\"&#125; 이러한 특성은 partial에 매우 유용하다.2개의 font.scss와 main.scss파일을 생성해보자. 12345678//font.scss$font-size: 16px !default;$line-height: 1.5 !default;$font-family: \"Helvetica Neue\", \"Helverica\", \"Arial\", sans-serif !default;body &#123; font: #&#123;$font-size&#125;/$line-height $font-family;&#125; main.scss는 내부에서 font.scss를 import한다. 1234//main.scss$font-family: \"Lucida Grande\", \"Lucida Sans Unicode\", sans-serif;@import \"font\"; 위 코드의 컴파일 결과는 아래와 같다. 123body &#123; font: 16px/1.5 \"Lucida Grande\", \"Lucida Sans Unicode\", sans-serif;&#125; !default는 변수에 값이 할당되지 않았을 때 사용할 기본 값을 지정할 때 사용한다. 위 예제의 경우 main.scss에서 변수에 값을 할당하였기 때문에 !default와 같이 사용한 변수값은 무력화된다. 만일 font.scss의 $font-family 변수에 !default설정이 없었다면 후위에 선언된 font.scss의 $font-family 변수값이 적용되어 아래와 같은 결과가 생성되었을 것이다. 123body &#123; font: 16px/1.5 \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;&#125;","categories":[],"tags":[]},{"title":"[Javascript] Prototype","slug":"Javascript/Javascript-Prototype","date":"2017-08-06T01:53:50.000Z","updated":"2017-08-06T04:09:57.000Z","comments":true,"path":"2017/08/06/Javascript/Javascript-Prototype/","link":"","permalink":"http://huusz.github.io/2017/08/06/Javascript/Javascript-Prototype/","excerpt":"","text":"Prototype 프로토타입과 객체지향객체(Object)자바스크립트에서는 객체를 만드는 방법으로 객체리터럴 방식과 생성자(Object() 함수, 일반 생성자 함수)를 이용한 방식이 있다. 12var objectMadeByLiteral = &#123;&#125;;var objectMadeByConstructor = new Object(); 리터럴은 Object 타입의 객체를 만들어내는 일종의 숏컷이고 두 번째 라인의 생성자를 이용한 코드 역시 Object 생성자이기 때문에 사실 위 예제는 구조면에서 동일한 객체를 만든다. 둘 다 Object타입을 갖는 객체로 Object타입의 메서드들을 사용할 수 있다. Object타입은 모든 객체의 최상위 타입이다. 사실 다른 객체지향언어의 관점에서 보면 위 코드는 Object객체의 인스턴스를 만든 것에 불과하니 상속받았다고 표현하기 어렵다. 하지만 자바스크립트에서는 조금 다른 개념으로 생각해야 한다. 지금 만들어진 객체가 Object 타입의 인스턴스 객체인 것도 맞지만 프로토 타입을 이용한 상속받은 객체라고 표현하는게 더 정확한 표현이다. 사실 상속이라는 표현도 OOP의 관점에서 사용하는 단어로 표현하고자 한 것일 뿐 실제로는 링크드 리스트 형태의 창조를 통한 객체끼리의 연결에 가깝고 클래스 매커니즘처럼 정적이지 않고 매우 동적이다. 1. 프로토타입 객체자바스크립트의 모든 객체는 부모가 존재한다. 그런데 객체가 생성자 함수를 통해 생성되었다고 하여 객체의 부모가 생성자함수인 것은 아니다. 모든 객체의 부모는 prototype 객체이다. 함수도 객체이다. 다만 함수 객체는 일반 객체와 달리 prototype이라는 프로퍼티를 특별히 가지고 있다. 생성자 함수는 함수 객체이다. 따라서 prototype 프로퍼티가 존재한다. 생성자 함수의 prototype 프로퍼티는 생성자 함수가 생산한 객체의 부모가 되는 prototype 객체를 가리킨다. 프로토타입은 자바의 객체지향의 상속 개념과 유사하다. 자바스크립트는 프로토타입 기반 객체지향언어이며 자바는 클래스 기반 객체지향언어이다. 따라서 둘은 같지 않다. 자바스크립트의 모든 객체는 자신의 부모 역할을 담당하는 객체와 연결되어 있다. 그리고 이것은 마치 객체 지향의 상속 개념과 같이 부모 객체의 프로퍼티 또는 메소드를 상속받아 사용할 수 있게 한다. 이러한 부모 객체를 Prototype(프로토타입) 객체 또는 줄여서 프로토타입이라 한다. 프로토타입을 이용하면 객체와 객체를 연결하고 한쪽 방향으로 상속을 받는 형태를 만들 수가 있다. 자바스크립트에서 객체와 객체를 연결해서 상속 받는다는 것은 다른 말로 객체와 객체를 연결해 멤버 함수나 멤버 변수를 공유 한다는 뜻이다. 이런 점을 이용해 자바스크립트에서는 상속과 비슷한 효과를 얻는 것이다. 123456789var student = &#123; name: 'Lee', score: 90&#125;;// student에는 hasOwnProperty 메서드가 없지만 아래 구문은 동작한다.console.log(student.hasOwnProperty('name')); // trueconsole.dir(student); 객체를 생성할 때 프로토타입은 결정된다. 결정된 프로토타입 객체는 다른 임의의 객체로 변경할 수 있다. 이것은 부모 객체인 프로토타입을 동적으로 변경할 수 있다는 것을 의미한다. 이러한 특징을 활용하여 객체의 상속을 구현할 수 있다. 2. [[Prototype]] 프로퍼티 VS prototype 프로퍼티[함수 객체와 일반 객체의 차이] 함수 객체는 prototype 프로퍼티를 가지고 있다.(prototype 프로퍼티는 prototype Object를 가리키고 있다.) 함수 객체는 호출될 수 있다. 자바스크립트 엔진은 객체를 일종의 키와 값을 가진 해쉬맵처럼 다룬다. 값에는 데이터나 함수가 들어갈 수 있으며 엔진 내부에 필요한 데이터를 임의로 만들어 넣기도 한다. 물론 그게 자바스크립트 단으로 노출이 될 수도, 안될 수도 있다. 프로토타입 체인의 핵심은 엔진이 사용하는 __proto__라는 속성이다. __proto__ 속성은 ECMAScript의 스펙 [[prototype]] 이 자바스크립트로 노출된 것인데 예전 스펙이 legacy처럼 남아있는 것이다. 모던 브라우저 개발자 도구에서도 디버깅 편의상 노출하고 있으나 코드에서 직접 접근하는 것은 피해야 한다. 클래스를 통한 상속의 경우 클래스 상속 정보를 이용해 상속 구조의 모습을 가진 새로운 객체를 찍어내는 반면 프로토타입을 통한 상속구조는 존재하는 객체와 객체의 동적인 연결로 풀어낸다. 그렇다보니 이미 객체가 만들어진 상태라도 상속된 내용의 변경/추가/삭제가 가능하며 아예 상속 구조를 바꿀 수도 있게 된다. 이렇게 객체와 객체의 연결을 통한 단방향 공유 관계를 프로토타입 체인이라고 한다. 3. constructor 프로퍼티프로토타입 객체는 constructor 프로퍼티를 갖는다. 이 constructor 프로퍼티는 객체의 입장에서 자신을 생성한 객체를 가리킨다. Person() 생성자 함수에 의해 생성된 객체를 생성한 객체는 Person() 생성자 함수이다. 따라서 prototype 객체의 constructor 프로퍼티는 객체를 생성하는 생성자 함수 객체를 가리킨다. 1234567891011121314function Person(name) &#123; this.name = name;&#125;var foo = new Person('Lee');// Person() 생성자 함수에 의해 생성된 객체를 생성한 객체는 Person() 생성자 함수이다.console.log(Person.prototype.constructor === Person);// foo 객체를 생성한 객체는 Person() 생성자 함수이다.console.log(foo.constructor === Person);// Person() 생성자 함수를 생성한 객체는 Function() 생성자 함수이다.console.log(Person.constructor === Function); 4. Prototype chain자바스크립트는 특정 객체의 프로퍼티나 메소드에 접근하려고 할 때 해당 객체에 접근하려는 프로퍼티 또는 메소드가 없다면 [[Prototype]] 프로퍼티가 가리키는 링크를 따라 자신의 부모 역할을 하는 프로토타입 객체의 프로퍼티나 메소드를 차례대로 검색한다. 이것을 프로토타입 체인이라 한다. 1234567var student = &#123; name: 'Lee', score: 90&#125;// Object.prototype.hasOwnProperty()console.log(student.hasOwnProperty('name')); // true 1) 객체 리터럴 방식으로 생성된 객체의 프로토타입 체인객체 생성 방법은 3가지가 있다. 객체 리터럴 생성자 함수 Object() 생성자 함수 객체 리터럴 방식으로 생성된 객체는 결국 내장 함수(Built-in)인 Object() 생성자 함수로 객체를 생성하는 것을 단순화시킨 것이다. 자바스크립트 엔진은 객체 리터럴로 객체를 생성하는 코드를 만나면 내부적으로 Object() 생성자 함수를 사용하여 객체를 생성한다. Object() 생성자 함수는 물론 함수이다. 따라서 함수 객체인 Object() 생성자 함수는 일반 객체와 달리 prototype 프로퍼티가 있다. prototype 프로퍼티는 함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다. [[Prototype]] 프로퍼티는 객체의 입장에서 자신의 부모 역할을 하는 프로토타입 객체을 가리킨다. 1234567891011121314var person = &#123; name: 'Lee', gender: 'male', sayHello: function()&#123; console.log('Hi! my name is ' + this.name); &#125;&#125;;console.dir(person);console.log(person.__proto__ === Object.prototype); // ① trueconsole.log(Object.prototype.constructor === Object); // ② trueconsole.log(Object.__proto__ === Function.prototype); // ③ trueconsole.log(Function.prototype.__proto__ === Object.prototype); // ④ true 결론적으로 객체 리터럴을 사용하여 객체를 생성한 경우, 그 객체의 프로토타입 객체는 Object.prototype이다. 2) 생성자 함수로 생성된 객체의 프로토타입 체인생성자 함수로 객체를 생성하기 위해서는 우선 생성자 함수를 정의하여야 한다. 함수를 정의하는 방식은 3가지가 있다. 함수선언식(Function declaration) 함수표현식(Function expression) Function() 생성자 함수 함수표현식으로 함수를 정의할 때 함수 리터럴 방식을 사용한다. 3가지 함수 정의 방식은 결국 Function() 생성자 함수를 통해 함수 객체를 생성한다, 따라서 어떠한 방식으로 함수 객체를 생성하여도 모든 함수 객체의 prototype 객체는 Function.prototype이다. 생성자 함수도 함수 객체이므로 생성자 함수의 prototype 객체는 Function.prototype이다. 이제 객체의 관점에서 prototype 객체를 살펴보자. 객체를 생성하는 방식은 3가지가 있다. 3가지 객체 생성 방식에 의해 생성된 객체의 prototype 객체를 정리해 보면 아래와 같다. 123456789101112131415161718192021function Person(name, gender) &#123; this.name = name; this.gender = gender; &lt;!-- this.sayHello = function()&#123; console.log('Hi! my name is ' + this.name); --&gt; &#125;;&#125;Person.prototype = function sayHello()&#123; console.log('Hi! my name is ' + this.name);var foo = new Person('Lee', 'male');console.dir(Person);console.dir(foo);console.log(foo.__proto__ === Person.prototype); // ① trueconsole.log(Person.prototype.__proto__ === Object.prototype); // ② trueconsole.log(Person.prototype.constructor === Person); // ③ trueconsole.log(Person.__proto__ === Function.prototype); // ④ trueconsole.log(Function.prototype.__proto__ === Object.prototype); // ⑤ true foo 객체의 프로토타입 객체 Person.prototype 객체와 Person() 생성자 함수의 프로토타입 객체인 Function.prototype의 프로토타입 객체는 Object.prototype 객체이다. 이는 객체 리터럴 방식이나 생성자 함수 방식이나 결국은 모든 객체의 부모 객체인 Object.prototype 객체에서 프로토타입 체인이 끝나기 때문이다. 이때 Object.prototype 객체를 프로토타입 체인의 종점(End of prototype chain)이라 한다. 5. 프로토타입 객체의 확장프로토타입 객체도 객체이므로 일반 객체와 같이 프로퍼티를 추가/삭제할 수 있다. 그리고 이렇게 추가/삭제된 프로퍼티는 즉시 프로토타입 체인에 반영된다. 1234567891011function Person(name) &#123; this.name = name;&#125;var foo = new Person('Lee');Person.prototype.sayHello = function()&#123; console.log('Hi! my name is ' + this.name);&#125;;foo.sayHello(); 생성자 함수 Person은 prototype 프로퍼티에 연결된 프로토타입 객체 Person.prototype를 갖는다. Person.prototype 객체는 일반 객체와 같이 프로퍼티를 추가/삭제가 가능하다. 위의 예에서는 Person.prototype 객체에 메소드 sayHello를 추가하였다. 이때 sayHello 메소드는 프로토타입 체인에 반영된다. 따라서 생성자 함수 Person에 의해 생성된 모든 객체는 프로토타입 체인에 의해 부모객체인 Person.prototype의 메소드를 사용할 수 있게 되었다. 6. 기본자료형(Primitive data type)의 확장자바스크립트에서 기본자료형(숫자, 문자열, boolean, null, undefined)을 제외한 모든것은 객체이다. 그런데 아래 예제를 살펴보면 기본자료형인 문자열이 흡사 객체와 같이 동작한다. 12345678910111213var str = 'test'; //리터럴 방식으로 객체 선언console.log(typeof str); // stringconsole.log(str.constructor === String); // trueconsole.dir(str);var strObj = new String('test');//객체인 문자열을 생성한다.console.log(typeof strObj); // objectconsole.log(strObj.constructor === String); // trueconsole.dir(strObj);console.log(str.toUpperCase()); // TESTconsole.log(strObj.toUpperCase()); // TEST 기본자료형과 객체의 차이:기본자료형은 상속, 프로퍼티, 메서드 개념이 없다. 그저 데이터(값)그 자체이다. 12345678var str = 'test';// 에러가 발생하지 않는다.str.myMethod = function () &#123; console.log('str.myMethod');&#125;;str.myMethod(); // Uncaught TypeError: str.myMethod is not a function String은 래퍼객체이다. 문자열을 String의 객체로 선언하면 String 객체 내부의 메소드를 사용할 수 있다. 그런데 모든 문자열을 다룰 때, 항상 객체로 다시 선언해주기에는 큰 번거로움이 따른다. 따라서 문자열 기본자료형에 .을 붙이면 자동으로 자바스크립트 엔진이 래퍼 객체를 통해 일시적으로 문자열 객체로 변환해준다. 따라서 리터럴 방식으로 선언한 기본자료형 문자열도 String객체의 메소드를 사용할 수 있게 된다. 123456789var str = 'test';String.prototype.myMethod = function () &#123; return 'myMethod';&#125;;console.log(str.myMethod()); // myMethodconsole.log('string'.myMethod()); // myMethodconsole.dir(String.prototype); 기본자료형 문자열과 String() 생성자 함수로 생성한 문자열 객체의 타입은 분명이 다르다. 기본 자료형은 객체가 아니므로 프로퍼티나 메소드를 가질수 없다. 하지만 기본자료형으로 프로퍼티나 메소드를 호출할 때 기본자료형과 연관된 객체로 일시적으로 변환되어 프로토타입 객체를 공유하게 된다. 기본자료형은 객체가 아니므로 .을 통해 바로 프로퍼티나 메소드를 직접 추가할 수 없다. 기본자료형은 오직 참조만 할 수 있다. 만약 기본자료형으로 메소드를 추가하고자 한다면, String 객체의 프로토타입 객체 String.prototype에 메소드를 추가하는 방법이 있다. 하지만 이는 위험 부담이 따른다. 앞선 방법으로 메소드를 추가하는 것은 Built-in 객체인 String 객체의 메소드들(표준)과 섞이거나 변수명의 중복으로 인해 기존 메소드가 지워지는 문제가 있을 수 있기 때문에 좋은 방식은 아니다. 이처럼 표준 이외의 메소드를 추가하는 것이 일종의 라이브러리인데, 라이브러리를 만들고자 할 때는 차라리 커스텀 객체를 따로 생성하는 것이 좋다. 앞서 살펴본 바와 같이 모든 객체는 프로토타입 체인에 의해 Object.prototype 객체의 메소드를 사용할 수 있었다. Object.prototype 객체는 프로토타입 체인의 종점으로 모든 객체가 사용할 수 있는 메소드를 갖는다. 이후 살펴보게 될 Built-in object(내장 객체)의 Global objects (Standard Built-in Objects)인 String, Number, Array 객체 등이 가지고 있는 표준 메소드는 프로토타입 객체인 String.prototype, Number.prototype, Array.prototype 등에 정의되어 있다. 이들 프로토타입 객체 또한 Object.prototype를 프로토타입 체인에 의해 자신의 프로토타입 객체로 연결한다. 자바스크립트는 표준 내장 객체의 프로토타입 객체에 개발자가 정의한 메소드의 추가를 허용한다. 1234567891011121314var str = 'test';String.prototype.myMethod = function() &#123; return 'myMethod';&#125;console.log(str.myMethod());console.dir(String.prototype);console.log(str.__proto__ === String.prototype); // ① trueconsole.log(String.prototype.__proto__ === Object.prototype); // ② trueconsole.log(String.prototype.constructor === String); // ③ trueconsole.log(String.__proto__ === Function.prototype); // ④ trueconsole.log(Function.prototype.__proto__ === Object.prototype); // ⑤ true 7. 프로토타입 객체의 변경객체를 생성할 때 프로토타입은 결정된다. 결정된 프로토타입 객체는 다른 임의의 객체로 변경할 수 있다. 이것은 부모 객체인 프로토타입을 동적으로 변경할 수 있다는 것을 의미한다. 이러한 특징을 활용하여 객체의 상속을 구현할 수 있다. 이때 주의할 것은 프로토타입 객체를 변경하면 프로토타입 객체 변경 시점 이전에 생성된 객체기존 프로토타입 객체를 [[Prototype]] 프로퍼티에 바인딩한다.프로토타입 객체 변경 시점 이후에 생성된 객체변경된 프로토타입 객체를 [[Prototype]] 프로퍼티에 바인딩한다. 12345678910111213141516function Person(name) &#123; this.name = name;&#125;var foo = new Person('Lee');// 프로토타입 객체의 변경Person.prototype = &#123; gender: 'male' &#125;;var bar = new Person('Kim');console.log(foo.gender); // undefinedconsole.log(bar.gender); // 'male'console.log(foo.constructor); // ① Person(name)console.log(bar.constructor); // ② Object() ① constructor 프로퍼티는 Person() 생성자 함수를 가리킨다. ② 프로토타입 객체 변경 후, Person() 생성자 함수의 Prototype 프로퍼티가 가리키는 프로토타입 객체를 일반 객체로 변경하면서 Person.prototype.constructor 프로퍼티도 삭제되었다. 따라서 프로토타입 체인에 의해 bar.constructor의 값은 프로토타입 체이닝에 의해 Object.prototype.constructor 즉 Object() 생성자 함수가 된다. 위 예제의 상속 방식은 물론 가능한 방식이지만, 문제점이 많기 때문에 사용하지 않는 방식이다. 8. 프로토타입 체인 동작기본적인 프로토타입 체인은 참조할 때 동작한다. 프로퍼티 동적 추가에서 객체에 프로퍼티가 존재하지 않으면 프로퍼티를 추가한다. 객체의 프로퍼티에 값을 할당하는 경우, 프로토타입 체인이 동작하지 않는다. 이는 객체에 해당 프로퍼티가 있는 경우, 값을 재할당하고 해당 프로퍼티가 없는 경우는 해당 객체에 프로퍼티를 동적으로 추가하기 때문이다. 123456789101112131415161718function Person(name) &#123; this.name = name;&#125;Person.prototype.gender = 'male'; // ①var foo = new Person('Lee');var bar = new Person('Kim');console.log(foo.gender); // ① 'male'console.log(bar.gender); // ① 'male'// 1. foo 객체에 gender 프로퍼티가 없으면 프로퍼티 동적 추가// 2. foo 객체에 gender 프로퍼티가 있으면 해당 프로퍼티에 값 할당foo.gender = 'female'; // ②console.log(foo.gender); // ② 'female'console.log(bar.gender); // ① 'male' 프로토 타입 체이닝은 참조할 때 위로 올라가는 것이다. 프로퍼티를 추가할 때는 자기 자신에게 추가한다. Reference Poiemaweb (서적)자바스크립트 닌자 비급, 인사이트, 2014 (서적) 인사이드 자바스크립트, 한빛, 2016","categories":[],"tags":[]},{"title":"[Javascript] Object","slug":"Javascript/Javascript-Object","date":"2017-08-05T11:16:16.000Z","updated":"2017-08-06T04:09:56.000Z","comments":true,"path":"2017/08/05/Javascript/Javascript-Object/","link":"","permalink":"http://huusz.github.io/2017/08/05/Javascript/Javascript-Object/","excerpt":"","text":"Object1. 객체(Object)란?자바스크립트는 객체(Object)기반의 스크립트 언어이며 자바스크립트를 이루고 있는 거의 “모든 것”은 객체이다. 기본 자료형(primitives)을 제외한 나머지 값들(함수, 배열, 정규표현식 등)은 모두 객체이다. primitives프리미티브: 객체도 아니고 메소드도 아닌 데이터. string/number/boolean/null/undefined/symbol로 6개의 기본 데이터 타입이 있다.null과 undefined를 제외하고 모든 프리미티브 값은 래퍼 객체를 갖는다. string을 위한 String객체 number를 위한 Number객체 boolean을 위한 Boolean객체 Symbol을 위한 Symbol객체 모두 Bulit-in Object(자바스크립트 내장객체)이다. 객체는 데이터와 데이터 관련 동작을 모두 포함할 수 있는 개념적 존재이다. 이름(키)과 값으로 구성된 데이터를 의미하는 프로퍼티(property)와 동작을 나타내는 메서드(method)를 포함하고 있는 독립적 주체이다. 객체는 흩어져있는 것들을 모은다는 관점에서 매우 유용하다. 객체 하나는 다른 객체를 포함할 수 있기 때문에 그래프나 트리와 같은 자료구조를 쉽게 표현할 수 있다. 1) 프로퍼티(property)객체는 프로퍼티들을 포함하는 컨테이너라고 할 수 있다. 프로퍼티는 객체의 속성을 나타내는 접근 가능한 이름과 활용 가능한 값을 가지는 특별한 형태이다. 프로퍼티는 객체를 활용함에 있어 매우 유용한 존재이다. 특정 객체가 가진 정보에 직접적으로 접근할 수 있게 해주기 때문이다. 프로퍼티 이름 명명 규칙: 빈 문자열을 포함하는 문자열과 숫자 프로퍼티 값: undefined 제외, 모든 값 가능 프로퍼티는 기본적으로 이름과 값으로 구성된다. 프로퍼티에 대한 접근 연산자는 .이다. 이 연산자를 통해 프로퍼티에 접근할 수도 있고 프로퍼티를 추가할 수도 있다. Q. 만약 프로퍼티에 아무런 값도 할당하지 않으면 어떻게 될까?변수는 값을 할당하지 않고 선언만 할 경우 자바스크립트 엔진이 강제로 undefined 를 할당한다. 하지만 프로퍼티는 값이 할당되지 않는다면 존재 이유가 없다. 객체의 정보를 담고 있어야 하는 요소가 아무 정보도 갖지 않는다면 객체로써는 이 프로퍼티가 쓸모가 없기 때문이다. 그렇기 때문에 프로퍼티를 추가하면서 값을 할당하지 않으면 syntax error 가 발생한다. 만약 값을 비워둬야 한다면 빈문자열(&#39;&#39;)을 넣는 것이 바람직하다. 2) 메서드(Method)메서드는 객체에 제한되어 있는 함수를 의미한다. 따라서 메서드 함수의 호출은 객체에 의해서만 가능하다.(=메서드를 호출하는 주체가 해당 함수를 프로퍼티로 가지고 있는 객체이다.) 1)함수를 객체의 프로퍼티로 할당하고, 그 프로퍼티를 사용하여 참조에 의한 호출이 일어나면, 함수는 그 객체의 메서드로 호출된다. 즉 프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드라 칭한다. 123var foo = &#123;&#125;; //Objectfoo.whatever = function()&#123;&#125;; //method of foo(Object)foo.whatever(); 2. 객체 생성 방법자바에서는 클래스를 사전에 정의하고 필요한 시점에 new 연산자를 사용하여 인스턴스를 생성하는 방식으로 객체를 생성한다. 하지만 자바스크립트는 클래스 개념이 없고 별도의 객체 생성 방법이 존재한다. 1) 객체 리터럴가장 일반적이며 간편한 자바스크립트 객체 생성 방식이다. 중괄호({})를 이용하여 객체를 생성하는데 {} 내에 아무것도 기술하지 않으면 빈 객체가 생성된다. {} 내에 프로퍼티이름: 프로퍼티값 을 기술하면 해당 프로퍼티가 추가된 객체를 생성할 수 있다. 객체 리터럴 방식의 특징은 new 연산자를 사용할 필요없이 선언과 동시에 인스턴스가 생성된다는 것이다. {name:value} 형태의 구성 방식을 JSON(javascript object notation) 방식이라고 한다. 12345678910111213141516var emptyObject = &#123;&#125;;console.log(typeof emptyObject); // objectvar person = &#123; name: 'Lee', gender: 'male', sayHello: function () &#123; console.log('Hi! My name is ' + this.name); &#125;&#125;;console.log(typeof person); // objectconsole.log(person); // &#123; name: 'Lee', gender: 'male', sayHello: [Function: sayHello] &#125;person.sayHello(); // Hi! My name is Lee` 2) Object() 생성자 함수object를 만드는 함수이다. new 연산자를 반드시 함께 사용해야 한다. new 연산자와 함께 사용하여 빈 객체를 생성할 수 있다. 우선 빈 객체를 생성하고, 이후에 프로퍼티와 메서드를 추가하여 객체를 완성하는 방법이다. 객체의 프로퍼티에 새로운 값을 할당하면, 프로퍼티 값은 갱신된다. 객체가 소유하고 있지 않은 프로퍼티에 값을 할당하면, 해당 객체에 프로퍼티 추가하고 값을 할당을 한다. 아래와 같은 방식으로 선언한다.1var obj = new Object(); 123456var person = new Object(); // obj에는 빈 객체가 들어온다.//프로퍼티 추가person.name = 'Lee'; //name 프로퍼티에 'Lee'값을 할당한다.person.gender = 'male';person.sayHello = 'Hello';... 이 방식은 별로 유용하지 않아 보인다.반드시 new 연산자와 Object() 생성자 함수를 사용하여 빈객체를 생성해야 하는 것은 아니다. 객체를 생성하는 방법은 객체 리터럴을 사용하는 것이 더 간편하다. 123456var person = &#123;&#125;;person.name = 'Lee';person.gender = 'male';person.sayHello = function () &#123; console.log('Hi! My name is ' + this.name);&#125;; 위와 같이 객체를 생성할 수도 있기 때문에다. 사실 이렇게 선언해도 자바스크립트 엔진은 Object 생성자를 불러서 객체를 만든다. 그러니 위와 같은 선언 방식은 shorthand인 셈이다. Object() 생성자는 사실 node에서 사용한다. 3) 생성자 함수객체 리터럴 방식과 Object() 생성자 함수 방식으로 객체를 생성하는 것은 프로퍼티 값만 다른 여러개의 객체 생성에 불편이 있다. 동일한 프로퍼티를 갖는 객체임에도 불구하고 매번 같은 프로퍼티를 기술해야한다.따라서, 유사 객체를 다량 생산 해야 할때, 생성자 함수가 매우 유용하게 쓰일 수 있다. 123456789101112131415var person1 = &#123; name: 'Lee', gender: 'male', sayHello: function () &#123; console.log('Hi! My name is ' + this.name); &#125;&#125;;var person2 = &#123; name: 'Kim', gender: 'female', sayHello: function () &#123; console.log('Hi! My name is ' + this.name); &#125;&#125;; 생성자 함수를 사용하면 마치 객체를 생성하기 위한 탬플릿(클래스)처럼 사용하여 구성이 동일한 객체 여러개를 간편하게 생성할 수 있다. 1234567891011121314151617181920// 생성자 함수function Person(name, gender) &#123; this.name = name; this.gender = gender; this.sayHello = function()&#123; console.log('Hi! My name is ' + this.name); &#125;;&#125;// 인스턴스의 생성var person1 = new Person('Lee', 'male');var person2 = new Person('Kim', 'female');console.log('person1: ', typeof person1);console.log('person2: ', typeof person2);console.log('person1: ', person1);console.log('person2: ', person2);person1.sayHello();person2.sayHello(); 생성자는 인스턴스를 찍어내는 공장이며, 인스턴스는 실제 객체이다. 생성자는 일반 함수로 사용하지 않고, 객체를 찍어낼 때만 사용해야 한다. 따라서 첫 문자를 대문자로 하는 관습이 있다. 생성자 함수임을 인식하는데 도움을 주기 위함이다. 따라서 생성자를 만들때는 이 관습을 지켜 네이밍하도록 한다. 프로퍼티 또는 메서드명 앞에 기술한 this는 생성자 함수로 생성될 인스턴스를 가리킨다. 따라서 this에 연결되어 있는 프로퍼티와 메서드는 public이다. 3. 객체 프로퍼티 접근1) 프로퍼티 이름프로퍼티 이름에는 문자열(빈 문자열 포함)과 숫자가 올 수 있다. 프로퍼티 값은 undefined을 제외한 모든 값과 표현식이 올 수 있으며 프로퍼티 값이 함수인 경우 이를 메서드라 한다. 프로퍼티 이름의 따옴표(‘’ 또는 ““)는 자바스크립트에서 사용할 수 있는 유효한 이름이고 예약어가 아닌 경우 생략할 수 있다. 반대로 말하면 자바스크립트에서 사용할 수 있는 유효한 이름이 아닌 경우 반드시 따옴표를 사용하여야 한다. 12345678var person = &#123; 'first-name': 'Ung-mo', /* 유효하지 않은 이름, 연산자가 있는 표현식 */ 'last-name': 'Lee', /* 프로퍼티 이름에 따옴표를 쓰지 않으면, 연산을 수행한다. last라는 변수를 찾으려고 할 것이다. 이로 인해 에러가 발생한다. */ gender: 'male', function: 1 /* OK. 하지만 예약어는 사용하지 말아야 한다. */&#125;;console.log(person.function); 명명 규칙 스네이크케이스: 공백(space) 대신 _(언더라인) 사용 (e.g. first_name) 케밥케이스: 공백 대신 - 사용 (e.g. first-name) 카멜케이스: 공백 대신 앞 문자를 대문자로 (e.g. firstName) 또한 예약어와 키워드는 사용하면 안 된다. 사용하여도 에러를 발생시키지는 않지만, 언제 에상치 못한 에러가 발생할지 모르기 때문이다. 2) 프로퍼티 값 읽기객체의 프로퍼티에 접근하려면 아래 두 방법을 사용한다. 마침표(.) 표기법 대괄호([])표기법 123456789101112131415var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male',&#125;;console.log(person);console.log(person.first-name); // NaN: undefined-name, first-name은 마이너스 연산을 하려고 하기 때문에 프로퍼티에 접근하기도 전에 프로퍼티 명에서부터 NaN을 반환한다.console.log(person[first-name]); // ReferenceError: first is not definedconsole.log(person['first-name']); // 'Ung-mo'console.log(person.gender); // 'male'console.log(person[gender]); // ReferenceError: gender is not definedconsole.log(person['gender']); // 'male' 프로퍼티 이름이 유효한 자바스크립트 이름이고 예약어가 아닌 경우 프로퍼티 값은 마침표 표기법, 대괄호 표기법 모두 사용할 수 있다. 프로퍼티 이름이 유효한 자바스크립트 이름이 아니거나 예약어인 경우 프로퍼티 값은 대괄호 표기법으로 읽어야 한다. 대괄호([]) 표기법을 사용하는 경우, 대괄호 내에 들어가는 프로퍼티 이름은 반드시 문자열이어야 한다. 객체에 존재하지 않는 프로퍼티를 참조하면 undefined를 반환한다. 12345678var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male',&#125;console.log(person.age); // undefined` 3) 프로퍼티 값 갱신객체가 소유하고 있는 프로퍼티에 새로운 값을 할당하면 프로퍼티 값은 새로운 값으로 갱신된다. 12345678var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male',&#125;;person['first-name'] = 'Kim';console.log(person['first-name'] ); // 'Kim' 4) 프로퍼티 동적 생성객체가 소유하고 있지 않은 프로퍼티에 값을 할당하면 하면 해당 프로퍼티를 객체에 추가하고 값을 할당한다. 12345678var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male',&#125;;person.age = 20;console.log(person.age); // 20 5) 프로퍼티 삭제delete 연산자를 사용하면 객체의 프로퍼티를 삭제할 수 있다. delete 연산자는 당연하게도, 객체가 소유하지 않는 프로퍼티에 적용할 수 없다. 1234567891011var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male',&#125;;delete person.gender;console.log(person.gender); // undefineddelete person;console.log(person); // Object &#123;first-name: 'Ung-mo', last-name: 'Lee'&#125; 6) for-in문for-in문을 사용하면 객체에 포함된 모든 프로퍼티에 대해 루프를 수행할 수 있다. 123456789101112131415var person = &#123; 'first-name': 'Ung-mo', 'last-name': 'Lee', gender: 'male'&#125;;for(var prop in person) &#123; console.log(prop + ': ' + person[prop]);&#125;/*first-name: Ung-molast-name: Leegender: male*/ for-in문은 여러가지 이유로 사용하지 않는다. 일단, 순서가 보장되지 않는다. es6에서 이를 보완한 for ~ of문이 나와있다. 4. Pass-by-reference기본자료형 object를 객체형 또는 참조형이라 한다. 참조형이란 객체의 모든 연산이 실제값이 아닌 참조값으로 처리됨을 의미한다.이에 반해 기본자료형의 값은 값(value)으로 전달된다. 즉 복사되어 전달된다. 이를 pass-by-value라고 한다.기본자료형은 값이 한번 정해지면 변경할 수 없지만(immutable), 객체는 변경 가능한 프로퍼티들의 집합이라 할 수 있다. 참조값을 준다는 것은 단일 객체를 사용한다는 의미이다. immutable객체는 참조형이다. 객체에 객체를 할당했을 때, 결국 똑같은 객체를 가리킨다. 5. Pass-by-value6. 객체의 분류 Bulit-in Object(내장 객체) Standard Built-in Object(or Global Objects) Native Object BOM(Browser Object Model): 브라우저에 대한 것을 컨트롤하기 위한 객체 (e.g. 스크롤) DOM(Document Object Model): html과 css에 대한 정보를 담고 있는 객체 [참고]Poeima webMDN koblogblog - this","categories":[],"tags":[]}]}